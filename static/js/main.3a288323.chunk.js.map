{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","props","className","title","calo","in","map","item","text","src","img","App","APP_ID","APP_KEY","useState","recipe","setRecipe","search","setSearch","query","setQuery","a","fetch","then","res","json","data","hits","console","log","useEffect","getRecipe","onSubmit","e","preventDefault","type","value","onChange","target","rec","index","label","calories","image","ingredients","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA6BeA,MA1Bf,SAAgBC,GACZ,OACI,gCAGI,sBAAKC,UAAU,eAAf,UACI,mCAAMD,EAAME,SACZ,4CAAeF,EAAMG,QACpBH,EAAMI,GAAGC,KAAI,SAAAC,GACV,OACI,4BAAIA,EAAKC,UAGjB,qBAAKC,IAAKR,EAAMS,SAMpB,uBAEA,2BC+CGC,MApEf,WACE,IAAMC,EAAS,WACTC,EAAU,qCAIhB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KARa,4CAcb,sBAAAC,EAAA,sDACEC,MAAM,mCAAD,OAAoCH,EAApC,mBAAoDP,EAApD,oBAAsEC,IAAWU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACjHV,EAAUU,EAAKC,MACfC,QAAQC,IAAIH,EAAKC,SAHrB,4CAda,sBAuCb,OAfAG,qBAAU,YAxBG,mCAyBXC,KACC,CAACZ,IAcF,sBAAKjB,UAAU,UAAf,UACE,uBAAMA,UAAU,cAAc8B,SAPlC,SAAmBC,GACjBA,EAAEC,iBACFd,EAASH,IAKP,UACE,uBAAOf,UAAU,eAAeiC,KAAK,OAAOC,MAAOnB,EAAQoB,SAbjE,SAAsBJ,GACpBf,EAAUe,EAAEK,OAAOF,UAaf,wBAAQlC,UAAU,gBAAgBiC,KAAK,SAAvC,oBACA,uBACA,uBACA,0BAIF,qBAAKjC,UAAU,oBAAf,SAEGa,EAAOT,KAAI,SAACiC,EAAKC,GAChB,OACE,cAAC,EAAD,CAAoBrC,MAAOoC,EAAIxB,OAAO0B,MAAOrC,KAAMmC,EAAIxB,OAAO2B,SAAUhC,IAAK6B,EAAIxB,OAAO4B,MACtFtC,GAAIkC,EAAIxB,OAAO6B,aADJJ,YC7CVK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3a288323.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\"\n\nfunction Recipe(props) {\n    return (\n        <div >\n\n\n            <div className=\"flexbox-item\" >\n                <h1> {props.title}</h1>\n                <p>Calories : {props.calo}</p>\n                {props.in.map(item => {\n                    return (\n                        <p>{item.text}</p>\n                    )\n                })}\n                <img src={props.img} />\n\n\n\n\n            </div>\n            <br />\n\n            <br />\n        </div>\n    )\n}\n\nexport default Recipe;","import { useEffect, useState, useRef } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./style.css\"\nfunction App() {\n  const APP_ID = \"35e9fd9c\";\n  const APP_KEY = \"d1cd5968bf1deccfbdecd30917305bc3\t\";\n\n\n\n  const [recipe, setRecipe] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n\n\n\n\n  async function getRecipe() {\n    fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`).then(res => res.json()).then(data => {\n      setRecipe(data.hits);\n      console.log(data.hits)\n\n    })\n\n  }\n\n\n  useEffect(() => {\n    getRecipe()\n  }, [query])\n\n\n  function searchRecipe(e) {\n    setSearch(e.target.value);\n\n  }\n\n  function getSearch(e) {\n    e.preventDefault();\n    setQuery(search);\n\n  }\n  return (\n    <div className=\"wrapper\">\n      <form className=\"search-form\" onSubmit={getSearch} >\n        <input className=\"search-input\" type=\"text\" value={search} onChange={searchRecipe} />\n        <button className=\"search-button\" type=\"submit\" >Search</button>\n        <br/>\n        <br/>\n        <br/>\n\n\n      </form>\n      <div className=\"flexbox-container\" >\n\n        {recipe.map((rec, index) => {\n          return (\n            <Recipe key={index} title={rec.recipe.label} calo={rec.recipe.calories} img={rec.recipe.image}\n              in={rec.recipe.ingredients}\n\n            />\n          )\n        })}\n      </div>\n    </div>\n  );\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}